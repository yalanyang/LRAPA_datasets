library(ggplot2)
library(data.table)
library(clustree)
RS1 = readRDS("RS_1.RDS")
dir()
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/Northwestern_scRNA/Shared_by_Rich")
dir())
dir()
pwd
getwd()
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/Northwestern_scRNA/Shared_by_Rich")
getwd()
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/Six_organiods_Cellreports/Flair/Neuron_Progenitor/GO")
getwd()
#tissue-specific genes分析
library(TCC)
packageVersion(RCC)
packageVersion(TCC)
packageVersion("TCC")
setwd("/Users/yangyalan/results/Long-read-APA-pipeline/Encode/subsample")
temp=list.files(path=".", pattern="*.bed")
temp
options(bedtools.path = "/Users/yangyalan/miniconda3/bin/")
library(bedtoolsr)
PolyASite <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/reference/polyA_ref/atlas.clusters.2.0.GRCh38.96.bed",header=F,sep='\t')
library(tidyr)
library(stringr)
library(dplyr)
PolyASite <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/reference/polyA_ref/atlas.clusters.2.0.GRCh38.96.bed",header=F,sep='\t')
library(data.table)
PolyASite <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/reference/polyA_ref/atlas.clusters.2.0.GRCh38.96.bed",header=F,sep='\t')
keep <- c(paste0("chr", 1:22), "chrX", "chrY")
PolyASite <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref/atlas.clusters.2.0.GRCh38.96.bed",header=F,sep='\t')
PolyASite <- PolyASite[V1 %in% chromosomes_to_keep]
chromosomes_to_keep <- c(paste0("chr", 1:22), "chrX", "chrY")
PolyASite <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref/atlas.clusters.2.0.GRCh38.96.bed",header=F,sep='\t')
PolyASite <- PolyASite[V1 %in% chromosomes_to_keep]
PolyASite <- unique(PolyASite[,1:6])
colnames(PolyASite) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
PolyA_DB <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref/human.polyDB.PAS.hg19to38.bed",header=F,sep='\t')
PolyA_DB <- PolyA_DB[V1 %in% chromosomes_to_keep]
PolyA_DB <- PolyA_DB %>% separate(V4,  c("name", "score", "strand"), sep = '[_]')
PolyA_DB$name="."
PolyA_DB$score="."
colnames(PolyA_DB) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
gr <- fread("../reference/hg38.refGene.gtf", sep = "\t", header = FALSE,
col.names = c("Chromosome", "Source", "Feature", "Start", "End", "Score", "Strand", "Frame", "Attributes"))
PolyA_DB$database <- "PolyA_DB"
gr <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/reference/hg38.refGene.gtf", sep = "\t", header = FALSE,
col.names = c("Chromosome", "Source", "Feature", "Start", "End", "Score", "Strand", "Frame", "Attributes"))
refgene <- gr[!grepl("*random|*alt|*fix|chrUn*|chrM",gr$Chromosome),]
refgene <- refgene[grepl("transcript",refgene$Feature),]
refgene$PAS <- ifelse(refgene$Strand == "+", refgene$End, refgene$Start)
refgene$Start <- refgene$PAS-1
refgene <- refgene %>% select(Chromosome,Start,PAS,Score,Frame,Strand)
colnames(refgene) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
refgene <- unique(refgene)
PolyA_DB$database <- "PolyA_DB"
PolyASite$database <- "PolyASite"
refgene$database <- "RefGene"
annotated_PAS <- rbind(PolyA_DB, PolyASite, refgene)
annotated_PAS <- annotated_PAS[order(annotated_PAS$chr, annotated_PAS$start, annotated_PAS$end), ]
head(annotated_PAS)
table(annotated_PAS$database)
Isoseq1 <- fread(temp[1], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("seqnames", "start", "end", "Name", "Score", "strand", "Count", "Hexamer", "UTR_id", "Feature",
"gene_id", "gene_count", "PAU", "PAS_ID"))
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "annotated_PAS", "PAU", "anno","PAS_ID_new"))
i=1
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "annotated_PAS", "PAU", "anno","PAS_ID_new"))
head(Isoseq1)
Isoseq1 <- Isoseq1[seqnames %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
head(Isoseq1)
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05)
nrow(Isoseq1)
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(genecount >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=polyDB,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),polyDB_Isoseq)
stat <-rbind(stat,data_sum)
}
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(gene_count >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=polyDB,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),polyDB_Isoseq)
stat <-rbind(stat,data_sum)
}
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(gene_count >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=polyDB,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),annotated_PAS)
stat <-rbind(stat,data_sum)
}
annotated_PAS <- rbind(PolyA_DB, PolyASite, refgene)
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(gene_count >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=annotated_PAS,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),polyDB_Isoseq)
stat <-rbind(stat,data_sum)
}
stat <- data.frame()
names <- c("file","peak","peak_polyDB")
stat <- data.frame()
names <- c("file","peak","peak_polyDB")
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "annotated_PAS", "PAU", "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05)
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(gene_count >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=annotated_PAS,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),polyDB_Isoseq)
stat <-rbind(stat,data_sum)
}
}
colnames(stat) <- c("file","coverage", "peak","peak_polyDB")
stat$peak_polyDB <- as.numeric(stat$peak_polyDB)
stat$peak <- as.numeric(stat$peak)
stat$ratio <- stat$peak_polyDB/stat$peak*100
stat$ID <-c(rep("10%",5),rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),rep("80%",5),
rep("90%",5), rep("All",5))
library(ggpubr)
ggline(stat, x = "coverage", y = "peak",color = "ID",legend = "right")
i=10
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "annotated_PAS", "PAU", "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05)
nrow(Isoseq1)
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "annotated_PAS", "PAU", "anno","PAS_ID_new"))
nrow(Isoseq1)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
nrow(Isoseq1)
nrow(Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05))
head(Isoseq1)
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05)
nrow(Isoseq1)
head(Isoseq1)
stat <- data.frame()
names <- c("file","peak","peak_polyDB")
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05)
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(gene_count >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=annotated_PAS,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),polyDB_Isoseq)
stat <-rbind(stat,data_sum)
}
}
colnames(stat) <- c("file","coverage", "peak","peak_polyDB")
stat$peak_polyDB <- as.numeric(stat$peak_polyDB)
stat$peak <- as.numeric(stat$peak)
stat$ratio <- stat$peak_polyDB/stat$peak*100
stat$ID <-c(rep("10%",5),rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),rep("80%",5),
rep("90%",5), rep("All",5))
library(ggpubr)
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",legend = "right") + scale_fill_npg("nrc", alpha = 0.7)
library(ggsci)
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",legend = "right") + scale_fill_npg("nrc", alpha = 0.7)
a
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
a
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(60,100),legend = "right")+ scale_colour_npg("nrc", alpha = 0.7)
b
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(70,100),legend = "right")+ scale_colour_npg("nrc", alpha = 0.7)
b
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(0,100),legend = "right")+ scale_colour_npg("nrc", alpha = 0.7)
b
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(50,100),legend = "right")+ scale_colour_npg("nrc", alpha = 0.7)
b
stat
stat2 <- stat[stat[,2]==40,]
ggline(stat2, x = "ID", y = "peak",ylim=c(0,30000),legend = "right",)
stat
stat2 <- stat[stat[,2]==10,]
ggline(stat2, x = "ID", y = "peak",ylim=c(0,30000),legend = "right",)
ggline(stat2, x = "ID", y = "peak",ylim=c(0,60000),legend = "right",)
ggline(stat2, x = "ID", y = "peak",ylim=c(0,30000),legend = "right",)+ scale_colour_npg("nrc", alpha = 0.7)
ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right",)+ scale_colour_npg("nrc", alpha = 0.7)
for (i in 1:length(temp)){
Isoseq1 <- read.table(temp[i], sep="\t",header=F)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 40)
data_sum <- data.frame(table(Isoseq1$region))
#data_sum <- data_sum[2:9,]
stat2 <-rbind(stat2,data_sum)
}
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 40)
data_sum <- data.frame(table(Isoseq1$Feature))
#data_sum <- data_sum[2:9,]
stat2 <-rbind(stat2,data_sum)
}
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 40)
data_sum <- data.frame(table(Isoseq1$Feature))
#data_sum <- data_sum[2:9,]
stat2 <-rbind(stat2,data_sum)
}
stat2
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 40)
data_sum <- data.frame(table(Isoseq1$Feature))
#data_sum <- data_sum[2:9,]
stat2 <-rbind(stat2,data_sum)
}
stat2
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 40)
data_sum <- data.frame(table(Isoseq1$Feature))
#data_sum <- data_sum[2:9,]
stat2 <-rbind(stat2,data_sum)
}
stat2
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
ggplot(stat2, aes(group, weight = Num, fill = Type)) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_brewer(palette = "Set3")+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
stat2
ggplot(stat2, aes(group, weight = Num, fill = Feature)) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_brewer(palette = "Set3")+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 40)
data_sum <- data.frame(table(Isoseq1$Feature))
stat2 <-rbind(stat2,data_sum)
}
colnames(stat2) <- c("Feature","Num")
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
ggplot(stat2, aes(group, weight = Num, fill = Feature)) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_brewer(palette = "Set3")+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 10)
data_sum <- data.frame(table(Isoseq1$Feature))
stat2 <-rbind(stat2,data_sum)
}
colnames(stat2) <- c("Feature","Num")
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
ggplot(stat2, aes(group, weight = Num, fill = Feature)) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_brewer(palette = "Set3")+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_brewer(palette = "Set3")+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
c <- ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right",)
rlang::last_trace()
stat2
arrange <- ggarrange(a,b,c,d, ncol = 2, nrow = 2)
d <- ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
arrange <- ggarrange(a,b,c,d, ncol = 2, nrow = 2)
d <- ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
arrange <- ggarrange(a,b,c,d, ncol = 2, nrow = 2)
a
b
c
d
c <- ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right")
stat2 <- stat[stat[,2]==10,]
c <- ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right")
c
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 10)
data_sum <- data.frame(table(Isoseq1$Feature))
stat2 <-rbind(stat2,data_sum)
}
colnames(stat2) <- c("Feature","Num")
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
d <- ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
arrange <- ggarrange(a,b,c,d, ncol = 2, nrow = 2)
arrange
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",ylim=c(0,60000),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
a
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",ylim=c(0,60000),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(50,100),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
stat2 <- stat[stat[,2]==10,]
c <- ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right")
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 10)
data_sum <- data.frame(table(Isoseq1$Feature))
stat2 <-rbind(stat2,data_sum)
}
colnames(stat2) <- c("Feature","Num")
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
d <- ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
ggsave("sum_sample.pdf", arrange, width = 6, height = 6)
ggsave("sum_sample.pdf", arrange, width = 10, height = 6)
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",ylim=c(0,60000),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(60,100),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
stat2 <- stat[stat[,2]==10,]
c <- ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right")
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 10)
data_sum <- data.frame(table(Isoseq1$Feature))
stat2 <-rbind(stat2,data_sum)
}
colnames(stat2) <- c("Feature","Num")
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
d <- ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
arrange <- ggarrange(a,b,c,d, ncol = 2, nrow = 2)
ggsave("sum_sample.pdf", arrange, width = 10, height = 6)
library(tidyr)
library(stringr)
library(dplyr)
library(data.table)
options(bedtools.path = "/Users/yangyalan/miniconda3/bin/")
library(bedtoolsr)
library(ggpubr)
library(ggsci)
setwd("/Users/yangyalan/results/Long-read-APA-pipeline/Encode/subsample")
temp=list.files(path=".", pattern="*.bed")
chromosomes_to_keep <- c(paste0("chr", 1:22), "chrX", "chrY")
PolyASite <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref/atlas.clusters.2.0.GRCh38.96.bed",header=F,sep='\t')
PolyASite <- PolyASite[V1 %in% chromosomes_to_keep]
PolyASite <- unique(PolyASite[,1:6])
colnames(PolyASite) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
PolyA_DB <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref/human.polyDB.PAS.hg19to38.bed",header=F,sep='\t')
PolyA_DB <- PolyA_DB[V1 %in% chromosomes_to_keep]
PolyA_DB <- PolyA_DB %>% separate(V4,  c("name", "score", "strand"), sep = '[_]')
PolyA_DB$name="."
PolyA_DB$score="."
colnames(PolyA_DB) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
gr <- fread("/Users/yangyalan/results/Long-read-APA-pipeline/reference/hg38.refGene.gtf", sep = "\t", header = FALSE,
col.names = c("Chromosome", "Source", "Feature", "Start", "End", "Score", "Strand", "Frame", "Attributes"))
refgene <- gr[!grepl("*random|*alt|*fix|chrUn*|chrM",gr$Chromosome),]
refgene <- refgene[grepl("transcript",refgene$Feature),]
refgene$PAS <- ifelse(refgene$Strand == "+", refgene$End, refgene$Start)
refgene$Start <- refgene$PAS-1
refgene <- refgene %>% select(Chromosome,Start,PAS,Score,Frame,Strand)
colnames(refgene) <- c('chr', 'start', 'end', 'name', 'score', 'strand')
refgene <- unique(refgene)
PolyA_DB$database <- "PolyA_DB"
PolyASite$database <- "PolyASite"
refgene$database <- "RefGene"
annotated_PAS <- rbind(PolyA_DB, PolyASite, refgene)
annotated_PAS <- annotated_PAS[order(annotated_PAS$chr, annotated_PAS$start, annotated_PAS$end), ]
stat <- data.frame()
names <- c("file","poly(A) sites","peak_polyDB")
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05)
for (cover in c(1,5,10,20,40)){
Isoseq1 <- Isoseq1 %>% dplyr::filter(gene_count >= cover)
polyDB_Isoseq <- nrow(unique(bt.intersect(a=Isoseq1, b=annotated_PAS,wa=T,wb=F)))
data_sum <- c(temp[i],cover,nrow(Isoseq1),polyDB_Isoseq)
stat <-rbind(stat,data_sum)
}
}
colnames(stat) <- c("file","Gene count", "poly(A) sites","peak_polyDB")
stat$peak_polyDB <- as.numeric(stat$peak_polyDB)
stat$peak <- as.numeric(stat$peak)
stat$ratio <- stat$peak_polyDB/stat$peak*100
stat$percentage <-c(rep("10%",5),rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),rep("80%",5),
rep("90%",5), rep("All",5))
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",ylim=c(0,60000),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
colnames(stat) <- c("file","Gene_count", "poly(A) sites","peak_polyDB")
stat$peak_polyDB <- as.numeric(stat$peak_polyDB)
stat$polyA_sites <- as.numeric(stat$polyA_sites)
colnames(stat) <- c("file","coverage", "peak","peak_polyDB")
stat$peak_polyDB <- as.numeric(stat$peak_polyDB)
stat$peak <- as.numeric(stat$peak)
stat$ratio <- stat$peak_polyDB/stat$peak*100
stat$ID <-c(rep("10%",5),rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),rep("80%",5),
rep("90%",5), rep("All",5))
a <- ggline(stat, x = "coverage", y = "peak",title="peak_number_diff_coverage", color = "ID",ylim=c(0,60000),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
b <- ggline(stat, x = "coverage", y = "ratio",title="peak_in_PolyDB",color = "ID",ylim=c(60,100),legend = "right") + scale_colour_npg("nrc", alpha = 0.7)
stat2 <- stat[stat[,2]==10,]
c <- ggline(stat2, x = "ID", y = "peak",ylim=c(0,50000),legend = "right")
stat2 <- data.frame()
for (i in 1:length(temp)){
Isoseq1 <- fread(temp[i], sep = "\t", header = TRUE, stringsAsFactors = FALSE,
col.names = c("chr", "start", "end", "Hexamer", "PAS_ID_old", "strand", "Count", "UTR_id", "Feature",
"gene_name", "gene_count", "PAU", "annotated_PAS",  "anno","PAS_ID_new"))
Isoseq1$Feature <- ifelse(Isoseq1$Feature == "stop_codon", "3UTR", Isoseq1$Feature)
Isoseq1 <- Isoseq1[chr %in% chromosomes_to_keep]
Isoseq1 <- Isoseq1 %>% dplyr::filter(PAU > 0.05 & gene_count >= 10)
data_sum <- data.frame(table(Isoseq1$Feature))
stat2 <-rbind(stat2,data_sum)
}
colnames(stat2) <- c("Feature","Num")
stat2$group <- c(rep("10%",5), rep("20%",5), rep("30%",5), rep("40%",5), rep("50%",5), rep("60%",5),rep("70%",5),
rep("80%",5), rep("90%",5),rep("All",5))
d <- ggplot(stat2, aes(group, weight = Num, fill = Feature,title="Distribution of PASs")) +
geom_bar(color = "black", width = .7, position = 'fill') +
scale_fill_npg("nrc", alpha = 0.7)+coord_flip()+
labs( y = 'ratio') +
scale_y_continuous(expand = c(0,0)) +
theme_classic()
arrange <- ggarrange(a,b,c,d, ncol = 2, nrow = 2)
