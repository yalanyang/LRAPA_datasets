RYA1_anno <- MapQuery(anchorset = anchors, query = RYA1, reference = merge,refdata=GM.6mon@meta.data$CellType,
reference.reduction = "pca")
anchors <- FindTransferAnchors(reference = GM.6mon, query = RYA1, normalization.method = "LogNormalize",dims = 1:30,reference.reduction = "pca",k.filter = NA)
predictions <- TransferData(anchorset = anchors, refdata = GM.6mon@meta.data$CellType,
dims = 1:30)
RYA1_anno <- MapQuery(anchorset = anchors, query = RYA1, reference = merge,refdata=GM.6mon@meta.data$CellType,
reference.reduction = "pca")
DimPlot(RYA1_anno, reduction = "tsne",group.by = "predicted.id")
refdata=GM.6mon@meta.data$CellType,
refdata=GM.6mon@meta.data$CellType
refdata
anchors <- FindTransferAnchors(reference = GM.6mon, query = RYA1, normalization.method = "LogNormalize",dims = 1:30,reference.reduction = "pca",k.filter = NA)
RYA1_anno <- MapQuery(anchorset = anchors, query = RYA1, reference = GM.6mon,refdata=GM.6mon@meta.data$CellType,
reference.reduction = "pca")
DimPlot(RYA1_anno, reduction = "tsne",group.by = "predicted.id")
DimPlot(RYA1_anno, reduction = "tsne",group.by = "predicted.id")
knitr::opts_chunk$set(echo = TRUE)
3mon <- merge(PGP1.3mon, y = c(HUES66.3mon,PGP1.3mon.Batch2))
mon3_all <- merge(PGP1.3mon, y = c(HUES66.3mon,PGP1.3mon.Batch2))
PGP1.3mon = readRDS("PGP1.3mon.rds")
HUES66.3mon = readRDS("HUES66.3mon.rds")
PGP1.3mon.Batch2 = readRDS("PGP1.3mon.batch2.rds")
mon3_all <- merge(PGP1.3mon, y = c(HUES66.3mon,PGP1.3mon.Batch2))
merge <- FindVariableFeatures(mon3_all, selection.method = "vst", nfeatures = 2000,verbose = FALSE)
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(data.table)
merge <- FindVariableFeatures(mon3_all, selection.method = "vst", nfeatures = 2000,verbose = FALSE)
merge <-ScaleData(mon3_all, verbose = FALSE)
library(monocle)
knitr::opts_chunk$set(echo = TRUE)
RYA1 = readRDS("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/RYA1/RYA1.rds")
library(Seurat)
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(data.table)
RYA1 <- RenameIdents(RYA1, `0` = "Immature neurons-a", `1` = "Radial Glia", `2` = "Immature neurons-b", `3` = "Glutamatergic neurons", `4` = "Cycling", `5` = "GABAergic cells-a", `6` = "Neuroepithelial cells", `7` = "Intermediate progenitors", `8` = "GABAergic cells-b")
DimPlot(RYA1, label = TRUE,reduction = "tsne")
cds <- as.cell_data_set(RYA)
library(monocle)
cds <- as.cell_data_set(RYA)
library(SeuratWrappers )
library(SeuratWrappers)
install.packages("SeuratWrappers")
library(monocle3)
install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')
BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
'limma', 'S4Vectors', 'SingleCellExperiment',
'SummarizedExperiment', 'batchelor', 'Matrix.utils'))
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/")
RUN1 = readRDS("RUN1.rds")
RUN3 = readRDS("RUN3.rds")
RUN4 = readRDS("RUN4.rds")
RUN5 = readRDS("RUN5.rds")
RWI = readRDS("RWI.rds")
RYA1 = readRDS("RYA1.rds")
RYA2 = readRDS("RYA2.rds")
RYA3 = readRDS("RYA3.rds")
RWI <- subset(RWI, subset = nFeature_RNA >= 300 & nFeature_RNA <= 5000 & percent.mt < 1)
org.list <-c (RYA1,RYA2,RYA3,RUN1,RUN3,RUN4,RUN5,RWI)
org.list <- lapply(X = org.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(data.table)
library(clustree)
org.list <-c (RYA1,RYA2,RYA3,RUN1,RUN3,RUN4,RUN5,RWI)
org.list <- lapply(X = org.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
features <- SelectIntegrationFeatures(object.list = org.list)
organ.anchors <- FindIntegrationAnchors(object.list = org.list, anchor.features = features)
organ.combined <- IntegrateData(anchorset = organ.anchors)
DefaultAssay(organ.combined) <- "integrated"
organ.combined <- ScaleData(organ.combined, verbose = FALSE)
organ.combined <- RunPCA(organ.combined, npcs = 30, verbose = FALSE)
organ.combined <- RunUMAP(organ.combined, reduction = "pca", dims = 1:30)
organ.combined <- RunTSNE(organ.combined, dims = 1:30,check_duplicates = FALSE)
organ.combined <- FindNeighbors(organ.combined, reduction = "pca", dims = 1:30)
saveRDS(organ.combined, file = "organiod_8sample.rds")
resolution.range <- seq(from = 0, to = 1, by = 0.1)
organ.combined <- FindClusters(object = organ.combined, resolution = resolution.range)
clustree(organ.combined, prefix = "integrated_snn_res.")
clustree(organ.combined, prefix = "integrated_snn_res.")
DimPlot(organ.combined, reduction = "tsne",resolution = 0.5 )
DimPlot(organ.combined, reduction = "tsne")
organ.combined@meta.data
organ.combined <- FindClusters(organ.combined, resolution = 0.5)
organ.combined <- FindClusters(organ.combined, resolution = 0.5)
DimPlot(organ.combined, reduction = "tsne")
saveRDS(organ.combined, file = "organiod_8sample.rds")
DimPlot(organ.combined, reduction = "tsne")
organ.combined
table(organ.combined$orig.ident)
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("HOPX","VIM","HES5"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features =c("SLC17A7","TBR1","FEZF2","BCL11B","NEUROD6","GRIN2B"),
reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("GAD1","GAD2", "SCG2","LHX1","VGF","TAC1"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("EOMES","INSM1","HES6"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="tsne",ncol = 3,assay = "RNA")
DefaultAssay(organ.combined) <- "RNA"
nk.markers <- FindConservedMarkers(organ.combined, ident.1 = 7, grouping.var = "stim", verbose = FALSE)
install.packages('BiocManager')
BiocManager::install('multtest')
install.packages('metap')
library(metap)
nk.markers <- FindConservedMarkers(organ.combined, ident.1 = 7, grouping.var = "stim", verbose = FALSE)
nk.markers <- FindConservedMarkers(organ.combined, ident.1 = 7, verbose = FALSE)
organ.combined@meta.data
nk.markers <- FindConservedMarkers(organ.combined, ident.1 = 7, grouping.var = "orig.ident", verbose = FALSE)
nk.markers
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="tsne",ncol = 3,assay = "RNA")
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("HOPX","VIM","HES5"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("EOMES","INSM1","HES6"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("MKI67","UBE2C","HIST1H1B"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features =c("SLC17A7","TBR1","FEZF2","BCL11B","NEUROD6","GRIN2B"),
reduction="tsne",ncol = 3)
DimPlot(organ.combined, label = TRUE,reduction = "tsne")
DimPlot(organ.combined, label = TRUE,reduction = "umap")
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="umpa",ncol = 3,assay = "RNA")
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="umap",ncol = 3,assay = "RNA")
FeaturePlot(organ.combined, features = c("STMN2","VIM","MKI67"),reduction="umap",ncol = 3)
FeaturePlot(organ.combined, features =c("SLC17A7","TBR1","FEZF2","BCL11B","NEUROD6","GRIN2B"),
reduction="umap",ncol = 3)
nk.markers <- FindConservedMarkers(organ.combined, ident.1 = 1, grouping.var = "orig.ident", verbose = FALSE)
nk.markers
FeaturePlot(organ.combined, features = c("STMN2","VIM","TUBB3"),reduction="umap",ncol = 3)
FeaturePlot(organ.combined, features = c("STMN2","VIM","TUBB3"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("STMN2","SEMA3C","TUBB3"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("STMN2","CALB2","TUBB3"),reduction="tsne",ncol = 3)
pdf("tSNE.pdf", 7, 5, encoding="MacRoman")
DimPlot(organ.combined, label = TRUE,reduction = "tsne")
dev.off()
pdf("UMAP.pdf", 7, 5, encoding="MacRoman")
DimPlot(organ.combined, label = TRUE,reduction = "umap")
dev.off()
FeaturePlot(organ.combined, features = c("GAD2","NEUROD2","HES5"),reduction="tsne",ncol = 3)
FeaturePlot(organ.combined, features = c("GAD2","MKI67","HES5"),reduction="tsne",ncol = 3)
DimPlot(organ.combined, label = TRUE,reduction = "tsne")
organ.combined <- FindClusters(organ.combined, resolution = 0.5)
DimPlot(organ.combined, reduction = "tsne")
organ.combined = readRDS("organiod_8sample.rds")
clustree(organ.combined, prefix = "integrated_snn_res.")
rsconnect::setAccountInfo(name='zlab1',
token='83C2D96FA3BFCBCCEAEB2B6D44F6FD92',
secret='<SECRET>')
rsconnect::setAccountInfo(name='zlab1',
token='83C2D96FA3BFCBCCEAEB2B6D44F6FD92',
secret='ChWozdJeidaouG0ALlZuYEuPKQUox6o4mXZXoFOC')
rsconnect::deployApp('/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/Six_organiods_Cellreports/scRNA/shinyApp')
rsconnect::deployApp('/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/Six_organiods_Cellreports/scRNA/shinyApp')
rsconnect::deployApp('/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/Six_organiods_Cellreports/scRNA/shinyApp')
rsconnect::deployApp('/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/Six_organiods_Cellreports/scRNA/scIsoseq')
Common issues on Mac OS
devtools::install_github("jbergenstrahle/STUtility")
install.packages("imager")
install.packages("imager")
install.packages("imager")
devtools::install_github("jbergenstrahle/STUtility")
install.packages("imager")
library(ggplot2)
install.packages("XQuartz")
install.packages("XQuartz")
devtools::install_github("jbergenstrahle/STUtility")
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/Northwestern_scRNA/Shared_by_Rich")
RS1 = readRDS("RS_1.RDS")
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(data.table)
library(clustree)
RS1 = readRDS("RS_1.RDS")
dir()
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/Northwestern_scRNA/Shared_by_Rich")
dir())
dir()
pwd
getwd()
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/Northwestern_scRNA/Shared_by_Rich")
getwd()
setwd("/Users/yangyalan/OneDrive - The University of Chicago/Chicago/organiod/Six_organiods_Cellreports/Flair/Neuron_Progenitor/GO")
getwd()
#tissue-specific genes分析
library(TCC)
packageVersion(RCC)
packageVersion(TCC)
packageVersion("TCC")
setwd("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref")
reference_genome <- "../reference/GRCh38.primary_assembly.genome.fa"
reference <- readDNAStringSet(reference_genome)
library(dplyr)
options(bedtools.path = "/Users/yangyalan/miniconda3/bin/")
library(bedtoolsr)
library(tidyr)
setwd("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref")
reference_genome <- "../reference/GRCh38.primary_assembly.genome.fa"
reference <- readDNAStringSet(reference_genome)
library(Biostrings)
setwd("/Users/yangyalan/results/Long-read-APA-pipeline/polyA_ref")
reference_genome <- "../reference/GRCh38.primary_assembly.genome.fa"
reference <- readDNAStringSet(reference_genome)
# Adjust chromosome names in reference if necessary
names(reference) <- sub(" +.*", "", names(reference))
gr <- fread("../reference/hg38.refGene.gtf", sep = "\t", header = FALSE,
col.names = c("Chromosome", "Source", "Feature", "Start", "End", "Score", "Strand", "Frame", "Attributes"))
library(Biostrings)
library(optparse)
library(rtracklayer)
library(ggplot2)
library(reshape2)
library(data.table)
library(dplyr)
options(bedtools.path = "/Users/yangyalan/miniconda3/bin/")
library(bedtoolsr)
library(tidyr)
organiod <- fread("organoid.PAS.bed", sep = "\t", header = T, stringsAsFactors = FALSE,
col.names = c("Chr",	"Start",	"End",	"Name",	"Score",	"Strand",	"Count",	"Hexamer",	"UTR_id",	"Feature",
"gene_name",	"gene_count",	"PAU",	"PAS_ID"))
organiod <- organiod %>% dplyr::filter(gene_count>=10)
# Function to calculate nucleotide frequencies at each position
calculate_frequencies <- function(sequences,window_size = 100) {
pos_range <- -window_size+50:window_size
freq_matrix <- matrix(0, nrow = length(pos_range), ncol = 4)
colnames(freq_matrix) <- c("A", "C", "G", "T")
for (i in seq_along(pos_range)) {
pos_nucleotides <- substr(sequences, i, i)
freq_matrix[i,] <- table(factor(pos_nucleotides, levels = c("A", "C", "G", "T")))
}
freq_df <- as.data.frame(freq_matrix)
freq_df$Position <- pos_range
return(freq_df)
}
organiod_UTR <- organiod[grepl("3UTR",organiod$Feature),]
organiod_UTR <- organiod_UTR[,1:6]
head(organiod_UTR)
organiod_UTR <- organiod[grepl("3UTR",organiod$Feature),]
organiod_UTR <- organiod_UTR[,1:6]
colnames(organiod_UTR) <- c('chrom', 'start', 'end', 'name', 'score', 'strand')
organiod_nonUTR <- organiod[!grepl("3UTR",organiod$Feature),]
organiod_nonUTR <- organiod_nonUTR[,1:6]
colnames(organiod_nonUTR) <- c('chrom', 'start', 'end', 'name', 'score', 'strand')
organiod <- organiod[,1:6]
colnames(organiod) <- c('chrom', 'start', 'end', 'name', 'score', 'strand')
head(organiod)
head(organiod_nonUTR)
lists <- list(organiod_UTR=organiod_UTR,organiod_nonUTR=organiod_nonUTR)
for (i in seq_along(lists)){
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
pdf_file <- paste0(names(lists[i]),"_sequence_distribution.pdf")
ggsave(file = pdf_file, plot = plot, width = 5, height = 3)
}
# Function to extract sequences around the end site considering strand information
extract_sequences <- function(row, genome, window_size=100) {
chrom <- row['chrom']
start <- as.numeric(row['end']) - window_size +50
end <- as.numeric(row['end']) + window_size
if (!chrom %in% names(genome)) {
stop(paste("Chromosome", chrom, "not found in genome"))
}
seq <- subseq(genome[[chrom]], start = start, end = end)
if (row['strand'] == "-") {
seq <- reverseComplement(seq)
}
return(as.character(seq))
}
for (i in seq_along(lists)){
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
pdf_file <- paste0(names(lists[i]),"_50sequence_distribution.pdf")
ggsave(file = pdf_file, plot = plot, width = 5, height = 3)
}
window_size = 100
lists <- list(organiod_UTR=organiod_UTR,organiod_nonUTR=organiod_nonUTR)
for (i in seq_along(lists)){
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
pdf_file <- paste0(names(lists[i]),"_50sequence_distribution.pdf")
ggsave(file = pdf_file, plot = plot, width = 5, height = 3)
}
i=1
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
plot
head(sequences)
head(freq_df)
freq_df
# Function to calculate nucleotide frequencies at each position
calculate_frequencies <- function(sequences,window_size = 100) {
pos_range <- -50:window_size
freq_matrix <- matrix(0, nrow = length(pos_range), ncol = 4)
colnames(freq_matrix) <- c("A", "C", "G", "T")
for (i in seq_along(pos_range)) {
pos_nucleotides <- substr(sequences, i, i)
freq_matrix[i,] <- table(factor(pos_nucleotides, levels = c("A", "C", "G", "T")))
}
freq_df <- as.data.frame(freq_matrix)
freq_df$Position <- pos_range
return(freq_df)
}
freq_df <- calculate_frequencies(sequences, window_size = window_size)
freq_df
for (i in seq_along(lists)){
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
pdf_file <- paste0(names(lists[i]),"_50sequence_distribution.pdf")
ggsave(file = pdf_file, plot = plot, width = 5, height = 3)
}
# Function to extract sequences around the end site considering strand information
extract_sequences <- function(row, genome, window_size=100) {
chrom <- row['chrom']
start <- as.numeric(row['end']) - window_size
end <- as.numeric(row['end']) + window_size
if (!chrom %in% names(genome)) {
stop(paste("Chromosome", chrom, "not found in genome"))
}
seq <- subseq(genome[[chrom]], start = start, end = end)
if (row['strand'] == "-") {
seq <- reverseComplement(seq)
}
return(as.character(seq))
}
# Function to extract sequences around the end site considering strand information
extract_sequences <- function(row, genome, window_size=50) {
chrom <- row['chrom']
start <- as.numeric(row['end']) - window_size
end <- as.numeric(row['end']) + window_size
if (!chrom %in% names(genome)) {
stop(paste("Chromosome", chrom, "not found in genome"))
}
seq <- subseq(genome[[chrom]], start = start, end = end)
if (row['strand'] == "-") {
seq <- reverseComplement(seq)
}
return(as.character(seq))
}
# Function to calculate nucleotide frequencies at each position
calculate_frequencies <- function(sequences,window_size = 50) {
pos_range <- -window_size:window_size
freq_matrix <- matrix(0, nrow = length(pos_range), ncol = 4)
colnames(freq_matrix) <- c("A", "C", "G", "T")
for (i in seq_along(pos_range)) {
pos_nucleotides <- substr(sequences, i, i)
freq_matrix[i,] <- table(factor(pos_nucleotides, levels = c("A", "C", "G", "T")))
}
freq_df <- as.data.frame(freq_matrix)
freq_df$Position <- pos_range
return(freq_df)
}
window_size = 50
lists <- list(organiod_UTR=organiod_UTR,organiod_nonUTR=organiod_nonUTR)
for (i in seq_along(lists)){
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
pdf_file <- paste0(names(lists[i]),"_50sequence_distribution.pdf")
ggsave(file = pdf_file, plot = plot, width = 5, height = 3)
}
freq_df
AAAAAA
seq <- "ACTGACGT"
reverseComplement(seq)
seq <- subseq(genome[[chrom]], start = start, end = end)
seq <- subseq(genome[[1]], start = 100, end = 120)
seq <- subseq(genome[1], start = 100, end = 120)
seq <- subseq(chr1, start = 100, end = 120)
lists[[i]]
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
sequences
freq_df <- calculate_frequencies(sequences, window_size = window_size)
freq_df
7867+1858+2397+3341
sequences <- apply(lists[[2]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
freq_df
View(freq_melted)
i=1
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
freq_df
6917+2455+2547+5689
chrom <- "chr1"
end <- "10000"
start <- 9980
seq <- subseq(genome[[chrom]], start = start, end = end)
seq <- subseq(reference[[chrom]], start = start, end = end)
seq <- subseq(reference[[chrom]], start = start, end = end)
chrom
seq <- subseq(genome[chrom], start = start, end = end)
seq <- subseq(reference[chrom], start = start, end = end)
start <- "9980"
seq <- subseq(reference[chrom], start = start, end = end)
start = 99800
end =100000
seq <- subseq(reference[chrom], start = start, end = end)
seq
start = 99980
seq <- subseq(reference[chrom], start = start, end = end)
seq
reverseComplement(seq)
gr <- fread("../reference/hg38.refGene.gtf", sep = "\t", header = FALSE,
col.names = c("Chromosome", "Source", "Feature", "Start", "End", "Score", "Strand", "Frame", "Attributes"))
encode <- gr[!grepl("*random|*alt|*fix|chrUn*|chrM",gr$Chromosome),]
encode <- encode[grepl("transcript",encode$Feature),]
encode$PAS <- ifelse(encode$Strand == "+", encode$End, encode$Start)
encode$Start <- encode$PAS-1
encode <- encode %>% select(Chromosome,Start,PAS,Score,Frame,Strand)
colnames(encode) <- c('chrom', 'start', 'end', 'name', 'score', 'strand')
encode <- unique(encode)
lists <- list(encode=encode)
for (i in seq_along(lists)){
sequences <- apply(lists[[i]], 1, extract_sequences, genome = reference, window_size = window_size)
freq_df <- calculate_frequencies(sequences, window_size = window_size)
# Melt the data frame for plotting
freq_melted <- melt(freq_df, id.vars = "Position", variable.name = "Nucleotide", value.name = "Frequency")
# Create a line plot using ggplot2
plot <- ggplot(freq_melted, aes(x = Position, y = Frequency, color = Nucleotide)) +
geom_line() +
labs(
title = "Sequence distribution around end sites (-100 to +100)",
x = "Relative Position to poly(A) cleavage site (nt)",
y = "Nucleotide frequency"
) +
theme_minimal()
pdf_file <- paste0(names(lists[i]),"_50sequence_distribution.pdf")
ggsave(file = pdf_file, plot = plot, width = 5, height = 3)
}
organiod <- fread("organoid.PAS.bed", sep = "\t", header = T, stringsAsFactors = FALSE,
col.names = c("Chr",	"Start",	"End",	"Name",	"Score",	"Strand",	"Count",	"Hexamer",	"UTR_id",	"Feature",
"gene_name",	"gene_count",	"PAU",	"PAS_ID"))
head(organiod)
head(encode)
